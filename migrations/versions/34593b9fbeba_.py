"""empty message

Revision ID: 34593b9fbeba
Revises: 3739c2174a1e
Create Date: 2019-04-16 17:22:05.477065

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.exc import InternalError

# revision identifiers, used by Alembic.
revision = '34593b9fbeba'
down_revision = '3739c2174a1e'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()
    groups = sa.table('group',
                      sa.Column('id', sa.Integer),
                      sa.Column('permission_id', sa.Integer))
    access = sa.table('group_access',
                      sa.Column('id', sa.Integer, primary_key=True),
                      sa.Column('permission_id', sa.Integer),
                      sa.Column('room_id', sa.Integer),
                      sa.Column('group_id', sa.Integer))
    vals = []
    q = sa.sql.select([groups.c.id, groups.c.permission_id])
    for row in conn.execute(q):
        vals.append({'group_id': row[0], 'permission_id':row[1]})
    conn.execute(access.insert(), vals)

    try:
        op.drop_constraint('group_permission_id_fkey', 'group', type_='foreignkey')
    except InternalError:
        row = conn.execute("SELECT CONSTRAINT_NAME FROM "
                           "INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE "
                           "REFERENCED_TABLE_NAME='permission' AND "
                           "TABLE_NAME='group';").fetchone()
        op.drop_constraint(row[0])
    op.drop_column('group', 'permission_id')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('group', sa.Column('permission_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_foreign_key('group_permission_id_fkey', 'group', 'permission', ['permission_id'], ['id'])

    conn = op.get_bind()
    groups = sa.table('group',
                      sa.Column('id', sa.Integer),
                      sa.Column('permission_id', sa.Integer))
    access = sa.table('group_access',
                      sa.Column('id', sa.Integer, primary_key=True),
                      sa.Column('permission_id', sa.Integer),
                      sa.Column('room_id', sa.Integer),
                      sa.Column('group_id', sa.Integer))
    vals = []
    q = sa.sql.select([access.c.group_id, access.c.permission_id]).\
        where(access.c.room_id == None)
    for row in conn.execute(q):
        vals.append({'group_id': row[0], 'permission_id':row[1]})

    q = groups.update().\
        where(groups.c.id == sa.bindparam('group_id')).\
        values(permission_id=sa.bindparam('permission_id'))
    conn.execute(q, vals)
    conn.execute(access.delete().where(access.c.room_id==None))
    # ### end Alembic commands ###
